{"version":3,"file":"onlinetextpreview.min.js","sources":["../src/onlinetextpreview.js"],"sourcesContent":["// This file is part of mod_publication for Moodle - http://moodle.org/\n//\n// It is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// It is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JS showing detailed infos about user's approval status for group approvals in a modal window\n *\n * @module        mod_publication/onlinetextpreview\n * @package\n * @author        Philipp Hager\n * @copyright     2020 Academic Moodle Cooperation {@link http://www.academic-moodle-cooperation.org}\n * @license       http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * @module mod_publication/onlinetextpreview\n */\ndefine(['jquery', 'core/modal_factory', 'core/str', 'core/ajax', 'core/log', 'core/notification'], function($,\n        ModalFactory, str, ajax, log, notification) {\n\n    /**\n     * @constructor\n     * @alias module:mod_publication/Onlinetextpreview\n     */\n    var Onlinetextpreview = function() {\n        this.cmid = '';\n    };\n\n    var instance = new Onlinetextpreview();\n\n    /**\n     * Initialises the JavaScript for publication's group approval status tooltips\n     *\n     *\n     * @param {Object} config The configuration\n     */\n    instance.initializer = function(config) {\n        instance.cmid = config.cmid;\n\n        log.info('Initialize onlinetextpreview JS!', 'mod_publication');\n\n        // Prepare modal object!\n        if (!instance.modal) {\n            instance.modalpromise = ModalFactory.create({\n                type: ModalFactory.types.DEFAULT,\n                large: true\n            });\n        }\n\n        str.get_strings([\n            {key: 'preview', component: 'core'},\n            {key: 'onlinetextfilename', component: 'assignsubmission_onlinetext'},\n            {key: 'from', component: 'core'}\n        ]).done(function(s) {\n            log.info('Done loading strings...', 'mod_publication');\n            instance.modalpromise.done(function(modal) {\n                log.info('Done preparing modal', 'mod_publication');\n                instance.modal = modal;\n                $('.path-mod-publication table.publications .onlinetextpreview *').click(function(e) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    var element = $(e.target);\n\n                    var dataelement = element.parent();\n\n                    var itemid;\n                    try {\n                        itemid = dataelement.data('itemid');\n                    } catch (ex) {\n                        notification.exception(ex);\n                    }\n\n                    ajax.call([\n                        {\n                            methodname: 'mod_publication_get_onlinetextpreview',\n                            args: {itemid: itemid, cmid: instance.cmid},\n                            done: function(data) {\n                                var itemname = '';\n                                if (dataelement.data('itemname').length) {\n                                    itemname = ' ' + s[2].toLowerCase() + ' ' + dataelement.data('itemname');\n                                }\n                                instance.modal.setTitle(s[0] + ' ' + s[1] + itemname);\n                                instance.modal.setBody(data);\n                                instance.modal.show();\n                            },\n                            fail: function(ex) {\n                                notification.exception(ex);\n                            }\n                        }\n                    ]);\n                });\n            });\n        }).fail(function(ex) {\n            log.error('Error getting strings: ' + ex, 'mod_publication');\n        });\n    };\n\n    return instance;\n});\n"],"names":["define","$","ModalFactory","str","ajax","log","notification","instance","cmid","initializer","config","info","modal","modalpromise","create","type","types","DEFAULT","large","get_strings","key","component","done","s","click","e","stopPropagation","preventDefault","itemid","dataelement","target","parent","data","ex","exception","call","methodname","args","itemname","length","toLowerCase","setTitle","setBody","show","fail","error"],"mappings":";;;;;;;;;AA4BAA,2CAAO,CAAC,SAAU,qBAAsB,WAAY,YAAa,WAAY,sBAAsB,SAASC,EACpGC,aAAcC,IAAKC,KAAMC,IAAKC,kBAU9BC,SAAW,IAJS,gBACfC,KAAO,WAWhBD,SAASE,YAAc,SAASC,QAC5BH,SAASC,KAAOE,OAAOF,KAEvBH,IAAIM,KAAK,mCAAoC,mBAGxCJ,SAASK,QACVL,SAASM,aAAeX,aAAaY,OAAO,CACxCC,KAAMb,aAAac,MAAMC,QACzBC,OAAO,KAIff,IAAIgB,YAAY,CACZ,CAACC,IAAK,UAAWC,UAAW,QAC5B,CAACD,IAAK,qBAAsBC,UAAW,+BACvC,CAACD,IAAK,OAAQC,UAAW,UAC1BC,MAAK,SAASC,GACblB,IAAIM,KAAK,0BAA2B,mBACpCJ,SAASM,aAAaS,MAAK,SAASV,OAChCP,IAAIM,KAAK,uBAAwB,mBACjCJ,SAASK,MAAQA,MACjBX,EAAE,iEAAiEuB,OAAM,SAASC,GAC9EA,EAAEC,kBACFD,EAAEE,qBAKEC,OAFAC,YAFU5B,EAAEwB,EAAEK,QAEQC,aAItBH,OAASC,YAAYG,KAAK,UAC5B,MAAOC,IACL3B,aAAa4B,UAAUD,IAG3B7B,KAAK+B,KAAK,CACN,CACIC,WAAY,wCACZC,KAAM,CAACT,OAAQA,OAAQpB,KAAMD,SAASC,MACtCc,KAAM,SAASU,UACPM,SAAW,GACXT,YAAYG,KAAK,YAAYO,SAC7BD,SAAW,IAAMf,EAAE,GAAGiB,cAAgB,IAAMX,YAAYG,KAAK,aAEjEzB,SAASK,MAAM6B,SAASlB,EAAE,GAAK,IAAMA,EAAE,GAAKe,UAC5C/B,SAASK,MAAM8B,QAAQV,MACvBzB,SAASK,MAAM+B,QAEnBC,KAAM,SAASX,IACX3B,aAAa4B,UAAUD,iBAM5CW,MAAK,SAASX,IACb5B,IAAIwC,MAAM,0BAA4BZ,GAAI,uBAI3C1B"}
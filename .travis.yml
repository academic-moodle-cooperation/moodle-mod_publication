# This is the language of our project.
language: php

addons:
  firefox: "47.0.1"
  postgresql: "9.4"
  apt:
    packages:
      # ...other stuff.
      - chromium-chromedriver

dist: bionic

# This tells Travis CI to cache Composer's cache.  Speeds up build times.
cache:
  directories:
    - $HOME/.composer/cache
    - $HOME/.npm

# Determines which versions of PHP to test our project against.  Each version listed
# here will create a separate build and run the tests against that version of PHP.
# WARNING, PHP7 only works in Moodle 3.0.1 or later!
php:
  - 7.1
  - 7.2
  - 7.3

services:
  - mysql

# This section sets up the environment variables for the build.
env:
  global:
    # This line determines which version of Moodle to test against.
    - MOODLE_BRANCH=MOODLE_37_STABLE
  # This matrix is used for testing against multiple databases.  So for each version of
  # PHP being tested, one build will be created for each database listed here.  EG: for
  # PHP 5.6, one build will be created using PHP 5.6 and pgsql.  In addition, another
  # build will be created using PHP 5.6 and mysqli.
  matrix:
    - DB=pgsql
    - DB=mysqli

## This section defines who's going to receive the notifications!
#notifications:
#  email:
#    recipients:
#        # I'm going to receive all reports, no matter what status they have or had (my encrypted e-mail-adress)!
#      - secure: "flCWAectL8i2cHnaaniLVwd5U9bX6AF1jkhHN1WFRjKVmA+6gR+ep/rRNhmzFPS3FRUsOQRT16XK6h2M5DVWcL+0dO/mVRMmyvLi/cDYVP3Gkmv5eCg3PhwYaS/D0Z5Df2ljE8VT6tRwQHHvuoOchvWjobx/Q7ybEg93UvOxoSBlXf/78ZDbyeuMPqlfISRUJ3xyzbv82Z1RNNhPG6t6eXCLfv583bp9S4ZGqJhR2rBGPt1fnMA0qcpz4RbKbmcUarpAD/VhG7VDs/Tvt1gpTHfG9qcNmwnsVHMo/zCcztrxSG171iwCeGCKyQS2x7t13T40c/yn6iWVmu0tC/HxzxypX1tUBr3LUomkU/AWsgxIZGrW+eksWil91ZAKHiE0aZEvUXOyn4wC3QWT/wK78NaSVbJyZfQdnUsp0ga5j7QiGzsFjQSNsP2NVAbO40QQJnu11fu+UqSmS/LoM/wwiZgakctY5RiP9cEoF0kkbX1QWDgQghhRQhv0JFwHrVI+96QJK/0nVR+lm5ZqMmmC1KG75QJR3yG112X0rfvLzOU31WxH6/0LGdxljY9R0FhIz54Eeg9NnbDBbc8y6Wb0o5STnU4drqzors/dOFoOb+ju3gI/lTS0vxT7gWBtaZiNjbcyLX1Myt9vJFSPKQHPCwD6Chq4hMEH3LxaYq4zIyQ="
#    on_success: always # default: change
#    on_failure: always # default: always
#  slack:
#    # This is the value "[Slack-Organisation]:[API-Key]#[channel]" just encrypted!
#    rooms:
#        #travisci channel
#      - secure: "ZJARQ+s7q7Ymn7v/CfKWDFz8d9kJ1cSV3VeSrC7FqNsGeSLFeL24bwCWs0XkxYKnBTQZ+CSDUcIZ+jUV4216H8znUoHlWsHKCtmlPkRzPgzdArYqNPbjgUhfmckodCvZ6ccNev8pg386jWILxBrwXUc3KsDbyqFIJMoYKt7bnAfn37mD1nExHujryyYE5Gtv7YKgemyBl+GXfoqF9bfQMQPUtQUTGy3Yc0g7T0vepbkKlR+xCvYaPZF5NdK1FJYQmTQihy0b1CehcAIemvhkDlWTuU1Ue46HEWno3x4Aowgt2Y505LYLh4rSxJIqROlGF+yd6TM8N2UeLjkhZH24e60aCUUgilBuQWbNk611ZixaUi+FclvyScMMlc/RAerFPZKFrcvI4nmCUQ6I5PS0VJgR7RDW3KFIM+7VXXItfh18qZFyOcZuwfDvFW+/kwYCaycoE7oqs53mOuCXCuWKtxp1QaRwubG/VFCm+nAkTUMaG00Hal7bPn5o500p9QCKXBTdF+s7HBrnA44BRt7ybHRum9MBdhIJLZhSxzIAKSbHK2HPgvREIAQKV7efaUajq8Icn09EiNimLkli92foxT32hoDEKKWIMYcjutVVGSS3HWeWmSFou9aY1YEdBfOB3XmVbd4sy4N5V2f1nSwNLaudizc/bpPBtfMkEjub3PE="
#        #mod_grouptool channel
#      - secure: "SnLn4Yn9lLCLh5mLqCR4HvcxmYLhwncw2o1Dw7v10EOwrYCB5USGVh8ranYhZdrlkzUmeQCRsjGO/2vHvRfFqpMKrmC8um0U6Tcx3wJZQ5xapTgfJMFmqOCt9JpnRzWBoGbYi5ne9+7glkte3P0C8GXL5uUcjy0N/z53g8ruYbkjUMlD+NmlCZw+ByDgiNEyL/qTHJ0VGamzYkE6cvcv0vNOou1MxW3oJo3KmmUYTPDE/wrKtUraTkNBbGfdDgnFPeiiX6yQt74Mk3aAJr0yBO+rfdOoadzBL9H1CJSEOYY3kulHCv4GKO8jjhnOBikS+T99twya7zabyEwoj/C5hr0XsNK0hJr/zNeROjCnUT5Qz25jWGXqkURRR4NB/zaE8wb5uKut1qiGrUBUsCcclQKCIUMg5nl4vXOnrfl3Wj/Xr5GdHLf7ZGORfYQKHMjjYn75LOc8E9JcwU+9b4pz2UobGP92QYs6xerU6VufQthXcFR/2z5BK4t+i8wRiNy2J61VDaDd9OeKRwEzDb+Kfk2hw/uwZdhOlvVC5M9t4+Zf6wJRR6lyZD1WyhEewZkmCZXoj2K1EIGRMF/iAT4WvLQ0HEIFTAePHQ5cOdHQc7DrtkN2NJdTLuL6EHAeP5a8HhuS1pU42z00PmsmlZmxVHGa94Q+xvRVa2shgwTXeMQ="
#    on_success: always # default: change
#    on_failure: always # default: always

# This lists steps that are run before the installation step.
before_install:
  # This disables XDebug which should speed up the build.  One reason to remove this
  # line is if you are trying to generate code coverage with PHPUnit.
  - phpenv config-rm xdebug.ini
  - nvm install 8.9
  - nvm use 8.9
  # Currently we are inside of the clone of your repository.  We move up two
  # directories to build the project.
  - cd ../..
  # Update Composer.
  - composer selfupdate
  # Install this project into a directory called "ci".
  - composer create-project -n --no-dev --prefer-dist blackboard-open-source/moodle-plugin-ci ci ^2
  # Update the $PATH so scripts from this project can be called easily.
  - export PATH="$(cd ci/bin; pwd):$(cd ci/vendor/bin; pwd):$PATH"
  # start your web application and listen on `localhost`
  - google-chrome-stable --headless --disable-gpu --remote-debugging-port=9222 http://localhost &

# This lists steps that are run for installation and setup.
install:
  # Run the default install.  The overview of what this does:
  #    - Clone the Moodle project into a directory called moodle.
  #    - Create Moodle config.php, database, data directories, etc.
  #    - Copy your plugin into Moodle.
  #    - If your plugin has Behat features, then Behat will be setup.
  #    - If your plugin has unit tests, then PHPUnit will be setup.
  - moodle-plugin-ci install

# This lists steps that are run for the purposes of testing.  Any of
# these steps can be re-ordered or removed to your liking.  And of
# course, you can add any of your own custom steps.
script:
  # This step lints your PHP files to check for syntax errors.
  - moodle-plugin-ci phplint
  # This step runs the PHP Copy/Paste Detector on your plugin. This helps to find
  # code duplication.
  - moodle-plugin-ci phpcpd
  # This step runs the PHP Mess Detector on your plugin. This helps to find potential
  # problems with your code which can result in refactoring opportunities.
  - moodle-plugin-ci phpmd
  # This step runs the Moodle Code Checker to make sure that your plugin conforms to the
  # Moodle coding standards.  It is highly recommended that you keep this step.
  - moodle-plugin-ci codechecker
  # This step runs some light validation on the plugin file structure and code.  Validation can be plugin specific.
  - moodle-plugin-ci validate

  - moodle-plugin-ci savepoints
  # Due to mustache linter trying to lint each template wrapped by a HTML doc with only <body>. I get some false positive errors
  # due to stray tags (the template misses the wrapping template).
  - moodle-plugin-ci mustache || true
  - moodle-plugin-ci grunt

  # This step runs the PHPUnit tests of your plugin.  If your plugin has PHPUnit tests,
  # then it is highly recommended that you keep this step.
  - moodle-plugin-ci phpunit
  # This step runs the Behat tests of your plugin.  If your plugin has Behat tests, then
  # it is highly recommended that you keep this step.
  - moodle-plugin-ci behat --profile default
  - moodle-plugin-ci behat --profile chrome

after_script:
  # See: https://github.com/moodlerooms/moodle-plugin-ci/issues/32
  # - ps aux
  - killall -9 php
  - killall -9 java
  - killall -9 Xvfb
  # - ps aux